/*
    1. V√≤ng l·∫∑p For
    => V√≤ng l·∫∑p ƒë∆∞·ª£c x√°c ƒë·ªãnh tr∆∞·ªõc

        1.1 V√≤ng l·∫∑p for tƒÉng
        1.2 V√≤ng l·∫∑p for gi·∫£m

        C√∫ ph√°p: 
        for (bienchay, dieukiendung, buocnhay) {
            
        }
*/

// s·ª≠ d·ª•ng h√†m console.log ƒë·ªÉ in ra 10 l·∫ßn d√≤ng ch·ªØ Xin ch√†o F8
// for (var i = 1; i <= 10; i++) {
//     console.log("Xin ch√†o F8: " + i);
// }

/*
- i++ : b∆∞·ªõc nh·∫£y
- Output: Xin ch√†o F8 * 10
- V√≤ng l·∫∑p for gi·∫£m s·∫Ω ch·∫°y ng∆∞·ª£c l·∫°i
*/

// Tr∆∞·ªùng h·ª£p v√≤ng l·∫∑p for l·ªìng nhau:
// for (var i = 1; i <= 5; i++) {
//   for (var j = 1; j <= 5; j++) {
//     console.log(`${i} - ${j}`);
//   }
// }

// -----------------------------------------------------

/*
B√†i t·∫≠p: T√≠nh gi√° tr·ªã bi·ªÉu th·ª©c
S = 1 + 2 + 3 + 4 + 5 + ... + N
*/

// var n = 10;
// var s = 0;
// for (var i = 1; i <= n; i++) {
//     s = s + i;
// }
// console.log(`${s}`)

/*
Duy·ªát ch∆∞∆°ng tr√¨nh qua t·ª´ng b∆∞·ªõc:
i = 5;
s = 0;

B1: i = 1 => 1 * 1 = 1
B2: i = 2 => 1 * 1 * 2 = 2
B3: i = 3 => 1 * 1 * 2 * 3 = 6
B4: i = 4 => 1 * 1 * 2 * 3 * 4 = 24 
B5: i = 5 => 1 * 1 * 2 * 3 * 4 * 5 =120

=> K·∫øt th√∫c v√≤ng l·∫∑p, 
total nh·∫≠n gi√° tr·ªã cu·ªëi c√πng l√† 120.
*/

// -----------------------------------------------------

/*
B√†i t·∫≠p 2: 
total = 1 + 1*2 + 1*2*3 + 1*2*3*4 + ... + 1*2*...*n
*/

// var n = 5;
// var total = 0;
// var subTotal = 1;

// for (var i = 0; i < n; i++) {
//     subTotal = subTotal * i;
//     total += subTotal;
// }

// console.log(`total: ${total}`);

/*
Duy·ªát ch∆∞∆°ng tr√¨nh qua t·ª´ng b∆∞·ªõc:
i = 5;
total = 0;
subTotal = 1;

B1: i = 1 => s = s + i = 0 + 1 = 2
B2: i = 2 => s = s + i = 1 + 2 = 3
B3: i = 3 => s = s + i = 3 + 3 = 6
B4: i = 4 => s = s + i = 6 + 4 = 10
B5: i = 5 => s = s + i = 10 + 5 = 15

=> K·∫øt th√∫c v√≤ng l·∫∑p, 
s nh·∫≠n gi√° tr·ªã cu·ªëi c√πng l√† 15.
*/

// -----------------------------------------------------

/*
B√†i t·∫≠p 3: Ki·ªÉm tra s·ªë nguy√™n t·ªë N

Y√™u c·∫ßu:
- S·ªë nguy√™n t·ªë ch·ªâ chia h·∫øt cho 1 v√† ch√≠nh n√≥
- S·ªë nguy√™n t·ªë > 1 => <= 1 k ph·∫£i s·ªë nguy√™n t·ªë
*/

// var n = 5;
// var check = true; // Gi·∫£ ƒë·ªãnh n l√† s·ªë nguy√™n t·ªë
// if ( n <= 1 || n % 1 !== 0) {
//     check = false;
// } else {
//     for (var i = 2; i < n; i++) {
//         if (n % i === 0) {
//             check = false;
//             // Tho√°t v√≤ng l·∫∑p -> ƒë·∫£m b·∫£o v·ªÅ performance
//             i = n;
//         }
//     }
// }

// if (check) {
//     console.log(`${n} l√† s·ªë nguy√™n t·ªë`)
// } else {
//     console.log(`${n} kh√¥ng ph·∫£i l√† s·ªë nguy√™n t·ªë`)
// }

// -----------------------------------------------------

/*
B√†i t·∫≠p 4: T·∫°o danh s√°ch s·ªë ng·∫´u nhi√™n

ƒê·ªÉ v∆∞·ª£t qua th·ª≠ th√°ch n√†y, b·∫°n c·∫ßn k·∫øt h·ª£p nhi·ªÅu ki·∫øn th·ª©c ƒë√£ h·ªçc nh∆∞: 
    l√†m vi·ªác v·ªõi array, ƒë·ªëi t∆∞·ª£ng Math v√† loop.

üëâ H√£y t·∫°o h√†m getRandNumbers c√≥ 3 tham s·ªë l√† min, max, length. 
H√†m n√†y s·∫Ω tr·∫£ v·ªÅ m·ªôt m·∫£ng g·ªìm length ph·∫ßn t·ª≠, 
c√°c gi√° tr·ªã trong m·∫£ng l√† s·ªë ng·∫´u nhi√™n, 
gi√° tr·ªã trong kho·∫£ng t·ª´ min t·ªõi max.

G·ª£i √Ω: 
Math.random() * (max - min) + min l√† c√°ch t·∫°o ra 1 s·ªë ng·∫´u nhi√™n 
trong kho·∫£ng min - max.
*/

// L√†m b√†i

// function getRandNumbers(min, max, length) {
//   let arr = [];
//   for (let i = 0; i < length; i++) {
//     arr.push(Math.floor(Math.random() * (max - min + 1)) + min);
//   }
//   return arr;
// }

/**
 * H·∫øt s·ª©c l∆∞u √Ω: H√£y suy nghƒ© k·ªπ ƒë·ªÉ ƒë·∫£m b·∫£o v√≤ng l·∫∑p (loop)
 * lu√¥n c√≥ ƒëi·ªÉm d·ª´ng, tr√¨nh duy·ªát c·ªßa b·∫°n s·∫Ω b·ªã treo
 * n·∫øu v√≤ng l·∫∑p kh√¥ng c√≥ ƒëi·ªÉm d·ª´ng.
 *
 * VD 1: for (var i = 0; i < 100; i--) // i++ m·ªõi ƒë√∫ng
 * VD 2: for (var i = 100; i >= 0; i++) // i-- m·ªõi ƒë√∫ng
 * l√† 2 v√≤ng l·∫∑p kh√¥ng c√≥ ƒëi·ªÉm d·ª´ng (l·∫∑p v√¥ h·∫°n)
 *
 * => Treo tr√¨nh duy·ªát!!!
 */

// -----------------------------------------------------

/*
B√†i t·∫≠p 5: T√≠nh t·ªïng c√°c ph·∫ßn t·ª≠ l√† s·ªë c·ªßa m·∫£ng

Cho tr∆∞·ªõc m·∫£ng numbers, 
h√£y vi·∫øt h√†m getTotal tr·∫£ v·ªÅ t·ªïng gi√° tr·ªã c√°c ph·∫ßn t·ª≠ c·ªßa m·∫£ng.
*/
// function getTotal(arr) {
//   let sum = 0;
//   for (let i = 0; i < arr.length; i++) {
//     sum += arr[i];
//   }
//   return sum;
// }

// Expected results
// getTotal([1, 2, 3]) // Output: 6
// getTotal([4, 5, -3]) // Output: 6
// getTotal([4, 5, 3, 5]) // Output: 17
// -----------------------------------------------------

/*
    2. V√≤ng l·∫∑p For/in
    
*/

// -----------------------------------------------------
/*
    4. V√≤ng l·∫∑p While
    C√°ch ho·∫°t ƒë·ªông: ƒëi·ªÅu ki·ªán trong while ƒë√∫ng th√¨ ch·∫°y, sai th√¨ d·ª´ng
    -> ƒë·ªÉ gi·∫£i quy·∫øt c√°c b√†i to√°n kh√¥ng bi·∫øt tr∆∞·ªõc l√† l·∫∑p l·∫°i bao nhi√™u l·∫ßn
    -> m·ªôt s·ªë b√†o to√°n karaoke, t√¨m chu·ªói

    L∆∞u √Ω: T·∫•t c·∫£ c√°c b√†i to√°n s·ª≠ d·ª•ng for ƒë·ªÅu c√≥ th·ªÉ chuy·ªÉn th√†nh while 
    nh∆∞ng kh√¥ng c√≥ tr∆∞·ªùng h·ª£p ng∆∞·ª£c l·∫°i
*/
// var i = 1;
// while (i <= 10) {
//     console.log(`Xin ch√†o F8: ${i}`);
//     i++;
// }

// var s = 0;
// var i = 1;
// while ( i <= 10 ) {
//     s += i;
//     i++;
// }
// console.log(`S = ${s}`)

/*
    5. V√≤ng l·∫∑p Do While
    -> ch·∫°y tr∆∞·ªõc ki·ªÉm tra sau
    -> cho d√π ƒëi·ªÅu ki·ªán sai v·∫´n s·∫Ω ch·∫°y v√≤ng l·∫∑p
*/
var i = 10;
do {
  console.log(i);
  i++;
} while (i < 10);
